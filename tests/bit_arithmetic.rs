//! 运算符测试

#[test]
fn test_bit_arithmetic() {
    // 这是一个位运算符号 << 的示例，表示将一个二进制数向左移动指定的位数，类似于十进制数的乘以2的n次方。例如：
    // 0 左移 1 位，结果为 0，因为二进制中的 0 向左移动 1 位仍然是 0。
    // 1 左移 1 位，结果为 2，因为二进制中的 1 向左移动 1 位变成了 10，而 10 表示的十进制数就是 2。
    // 2 左移 1 位，结果为 4，因为二进制中的 10 向左移动 1 位变成了 100，而 100 表示的十进制数就是 4。
    assert_eq!(0 << 1, 0);
    assert_eq!(1 << 1, 2);
    assert_eq!(2 << 1, 4);

    // 这是一个位运算符号 >> 的示例，表示将一个二进制数向右移动指定的位数，类似于十进制数的除以2的n次方。例如：
    // 0 右移 1 位，结果为 0，因为二进制中的 0 向右移动 1 位仍然是 0。
    // 1 右移 1 位，结果为 0，因为二进制中的 1 向右移动 1 位变成了 0，而 0 表示的十进制数就是 0。
    // 2 右移 1 位，结果为 1，因为二进制中的 10 向右移动 1 位变成了 1，而 1 表示的十进制数就是 1。
    // 3 右移 1 位，结果为 1，因为二进制中的 11 向右移动 1 位变成了 1，而 1 表示的十进制数就是 1。
    // 4 右移 1 位，结果为 2，因为二进制中的 100 向右移动 1 位变成了 10，而 10 表示的十进制数就是 2。
    assert_eq!(0 >> 1, 0);
    assert_eq!(1 >> 1, 0);
    assert_eq!(2 >> 1, 1);
    assert_eq!(3 >> 1, 1);
    assert_eq!(4 >> 1, 2);
}

#[test]
fn test_operator() {
    let mut x = 1;
    x <<= 1; // x *= 2;
    x = (x << 1) + (x << 3); // x *= 10;
    x >>= 1; // x /= 2;
    println!("{}", x);

    let mut a = 5;
    let mut b = 3;
    a ^= b;
    b ^= a;
    a ^= b; // 交换两个值
    println!("{} {}", a, b);
}
