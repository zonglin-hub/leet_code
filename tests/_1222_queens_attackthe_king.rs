use leet_code::{expected_sort, expected_sort_vec, Solution};

#[test]
fn test_queens_attackthe_king_v1() {
    /*
        输入：queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]
        输出：[[0,1],[1,0],[3,3]]
        解释：

        Q 🇶 黑皇后的位置
        Q 可以攻击到国王的位置
        k 国王坐标

        K Q * * 🇶 * * *
        Q * * * * * * *
        * * * * 🇶 * * *
        * * * Q * * * *
        🇶 * * * * * * *
        * * * * * * * *
        * * * * * * * *
        * * * * * * * *

        [0,1] 的皇后可以攻击到国王，因为他们在同一行上。
        [1,0] 的皇后可以攻击到国王，因为他们在同一列上。
        [3,3] 的皇后可以攻击到国王，因为他们在同一条对角线上。
        [0,4] 的皇后无法攻击到国王，因为她被位于 [0,1] 的皇后挡住了。
        [4,0] 的皇后无法攻击到国王，因为她被位于 [1,0] 的皇后挡住了。
        [2,4] 的皇后无法攻击到国王，因为她和国王不在同一行/列/对角线上。
    */
    assert_eq!(
        expected_sort(Solution::queens_attackthe_king_v1(
            expected_sort_vec(vec![[0, 1], [1, 0], [4, 0], [0, 4], [3, 3], [2, 4]]),
            vec![0, 0],
        )),
        expected_sort(expected_sort_vec(vec![[0, 1], [1, 0], [3, 3]]))
    );

    /*
        输入：queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3]
        输出：[[2,2],[3,4],[4,4]]

        🇶 * * * * * * *
        * 🇶 * * * * * *
        * * Q * * * * *
        * * * K Q 🇶 * *
        * * * * Q 🇶 * *
        * * * * * * * *
        * * * * * * * *
        * * * * * * * *

    */
    assert_eq!(
        expected_sort(Solution::queens_attackthe_king_v1(
            expected_sort_vec(vec![[0, 0], [1, 1], [2, 2], [3, 4], [3, 5], [4, 4], [4, 5]],),
            vec![3, 3],
        )),
        expected_sort(expected_sort_vec(vec![[2, 2], [3, 4], [4, 4]]))
    );

    /*
        输入：queens = [
                [5, 6],
                [7, 7],
                [2, 1],
                [0, 7],
                [1, 6],
                [5, 1],
                [3, 7],
                [0, 3],
                [4, 0],
                [1, 2],
                [6, 3],
                [5, 0],
                [0, 4],
                [2, 2],
                [1, 1],
                [6, 4],
                [5, 4],
                [0, 0],
                [2, 6],
                [4, 5],
                [5, 2],
                [1, 4],
                [7, 5],
                [2, 3],
                [0, 5],
                [4, 2],
                [1, 0],
                [2, 7],
                [0, 1],
                [4, 6],
                [6, 1],
                [0, 6],
                [4, 3],
                [1, 7]
            ], king = [3,4]
        输出：[[2,3],[1,4],[1,6],[3,7],[4,3],[5,4],[4,5]]

        🇶 🇶 * 🇶 🇶 🇶 🇶 🇶
        🇶 🇶 🇶 * Q * Q 🇶
        * 🇶 🇶 Q * * 🇶 🇶
        * * * * K * * Q
        🇶 * 🇶 Q * Q 🇶 *
        🇶 🇶 🇶 * Q * 🇶 *
        * 🇶 * 🇶 🇶 * * *
        * * * * * 🇶 * 🇶

    */
    assert_eq!(
        expected_sort(Solution::queens_attackthe_king_v1(
            expected_sort_vec(vec![
                [5, 6],
                [7, 7],
                [2, 1],
                [0, 7],
                [1, 6],
                [5, 1],
                [3, 7],
                [0, 3],
                [4, 0],
                [1, 2],
                [6, 3],
                [5, 0],
                [0, 4],
                [2, 2],
                [1, 1],
                [6, 4],
                [5, 4],
                [0, 0],
                [2, 6],
                [4, 5],
                [5, 2],
                [1, 4],
                [7, 5],
                [2, 3],
                [0, 5],
                [4, 2],
                [1, 0],
                [2, 7],
                [0, 1],
                [4, 6],
                [6, 1],
                [0, 6],
                [4, 3],
                [1, 7]
            ],),
            vec![3, 4],
        )),
        expected_sort(expected_sort_vec(vec![
            [2, 3],
            [1, 4],
            [1, 6],
            [3, 7],
            [4, 3],
            [5, 4],
            [4, 5]
        ]))
    );
}
